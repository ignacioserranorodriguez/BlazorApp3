@using BlazorApp3.Models
@using Microsoft.EntityFrameworkCore
@inject BlazorApp3.Data.BlazorApp3Context DbContext

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="BlazorApp3.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <RadzenTheme Theme="material" @rendermode="InteractiveServer" />
    <HeadOutlet />
</head>

<body>
    <Routes />
    <script src="_framework/blazor.web.js"></script>
    <script
        src="_content/Radzen.Blazor/Radzen.Blazor.js?v=@(typeof(Radzen.Colors).Assembly.GetName().Version)"></script>
</body>

</html>

@code {
    private List<Receiver> receivers = new List<Receiver>();

    protected override async Task OnInitializedAsync()
    {
        // Fetch all receivers from the database
        receivers = await DbContext.Receiver.ToListAsync();

        // Fetch all connections for the profile with Id 1
        var connections = await DbContext.Connection
        .Where(c => c.ProfileId == 1)
        .Include(c => c.Transmitter)
        .Include(c => c.Receiver)
        .ToListAsync();

        // Update each Receiver with the corresponding TransmitterId from the Connection
        foreach (var connection in connections)
        {
            var receiver = receivers.FirstOrDefault(r => r.Id == connection.ReceiverId);
            if (receiver != null)
            {
                receiver.TransmitterId = connection.TransmitterId;
            }
        }

        // Save changes to the database
        await DbContext.SaveChangesAsync();
    }
}