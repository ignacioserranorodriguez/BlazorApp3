@page "/"
@page "/visualizador"

@using Radzen.Blazor
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorApp3.Models
@using BlazorApp3.Data
@inject IDbContextFactory<BlazorApp3.Data.BlazorApp3Context> DbFactory

<PageTitle>Matriz de vídeo - Visualizador</PageTitle>

<h1>Visualizador de dispositivos</h1><br />

<h4>📡Transmisores</h4>

<RadzenDataGrid AllowFiltering="false" AllowColumnResize="false" AllowAlternatingRows="false"
    FilterMode="FilterMode.Advanced" AllowSorting="false" PageSize="5" AllowPaging="false"
    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="false" Data="@transmitters" ColumnWidth="300px"
    LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single">
    <Columns>
        <RadzenDataGridColumn Title="Imagen" Width="200px" TextAlign="TextAlign.Center">
            <Template Context="data">
                @if (data.Status != 0 && data.Status != 2)
                {
                    <RadzenImage Path="@data.Url" Style="width: 15rem;" AlternateText="Image" />
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Name" Title="Nombre" Width="150px" />
        <RadzenDataGridColumn Title="Estado" Width="300px">
            <Template Context="data">
                @if (data.Status == 0)
                {
                    <span>⬛ Apagado</span>
                }
                else if (data.Status == 1)
                {
                    <span>🟩 Encendido</span>
                }
                else if (data.Status == 2)
                {
                    <span>🟨 Espera</span>
                }
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid><br />

<h4>🗼Receptores</h4>

<RadzenDataGrid AllowFiltering="false" AllowColumnResize="false" AllowAlternatingRows="false"
    FilterMode="FilterMode.Advanced" AllowSorting="false" PageSize="5" AllowPaging="false"
    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="false" Data="@receivers" ColumnWidth="300px"
    LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single">
    <Columns>
        <RadzenDataGridColumn Title="Imagen" Width="200px" TextAlign="TextAlign.Center">
            <Template Context="data">
                @if (data.Status != 0 && data.Status != 2)
                {
                    @if (data.Status != 0 && data.Status != 2)
                    {
                        var transmitter = transmitters.FirstOrDefault(t => t.Id == data.TransmitterId && t.Status == 1);
                        if (transmitter != null)
                        {
                            <RadzenImage Path="@transmitter.Url" Style="width: 15rem;" AlternateText="Image" />
                        }
                    }
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Name" Title="Nombre" Width="150px" />
        <RadzenDataGridColumn Title="Estado" Width="300px">
            <Template Context="data">
                @if (data.Status == 0)
                {
                    <span>⬛ Apagado</span>
                }
                else if (data.Status == 1)
                {
                    <span>🟩 Encendido</span>
                }
                else if (data.Status == 2)
                {
                    <span>🟨 Espera</span>
                }
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {

    BlazorApp3Context context = default!;
    private List<Transmitter> transmitters = new List<Transmitter>();
    private List<Receiver> receivers = new List<Receiver>();
    IEnumerable<string> transmitterNames = new List<string>();
    IEnumerable<string> receiverNames = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        context = await DbFactory.CreateDbContextAsync();
        receivers = await context.Receiver.ToListAsync();
        transmitters = await context.Transmitter.ToListAsync();
        transmitterNames = transmitters.Select(d => d.Name ?? string.Empty).ToList();
        receiverNames = receivers.Select(d => d.Name ?? string.Empty).ToList();
        if (transmitters.Count == 0 || receivers.Count == 0)
        {
            await Task.Delay(400); // Wait for 500 milliseconds (0.5 seconds)
        }
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
