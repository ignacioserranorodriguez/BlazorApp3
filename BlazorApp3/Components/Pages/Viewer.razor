@page "/"
@page "/visualizador"

@using Radzen.Blazor
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorApp3.Models
@using BlazorApp3.Data
@inject IDbContextFactory<BlazorApp3.Data.BlazorApp3Context> DbFactory

<PageTitle>Home</PageTitle>

<h3>Transmisores</h3>

<RadzenDataGrid AllowFiltering="false" AllowColumnResize="false" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="false" PageSize="5" AllowPaging="false" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="false"
                Data="@transmitters" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single">
    <Columns>
        <RadzenDataGridColumn Title="Imagen" Width="200px" TextAlign="TextAlign.Center">
            <Template Context="data">
                @if (data.Status != 0 && data.Status != 2)
                {
                    <RadzenImage Path="@data.Url" Style="width: 15rem;" AlternateText="Image" />
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Name" Title="Nombre" Width="300px" />
        <RadzenDataGridColumn Title="Estado" Width="300px">
            <Template Context="data">
                @if (data.Status == 0)
                {
                    <span>Apagado</span>
                }
                else if (data.Status == 1)
                {
                    <span>Encendido</span>
                }
                else if (data.Status == 2)
                {
                    <span>Espera</span>
                }
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<h3>Receptores</h3>

<RadzenDataGrid AllowFiltering="false" AllowColumnResize="false" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="false" PageSize="5" AllowPaging="false" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="false"
                Data="@images" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single">
    <Columns>
        <RadzenDataGridColumn Width="200px" TextAlign="TextAlign.Center">
            <Template Context="data">
                <RadzenImage Path="@data.Url" class="rz-gravatar" AlternateText="Image" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Description" Width="300px" />
    </Columns>
</RadzenDataGrid>

@code {
    IEnumerable<ImageItem> images;

    protected override void OnInitialized()
    {
        images = new List<ImageItem>
        {
            new ImageItem { Url = "https://via.placeholder.com/150", Description = "Placeholder Image 1" },
            new ImageItem { Url = "https://via.placeholder.com/150", Description = "Placeholder Image 2" },
            new ImageItem { Url = "https://via.placeholder.com/150", Description = "Placeholder Image 3" },
            new ImageItem { Url = "https://via.placeholder.com/150", Description = "Placeholder Image 4" },
            new ImageItem { Url = "https://via.placeholder.com/150", Description = "Placeholder Image 5" }
        };
    }

    public class ImageItem
    {
        public string Url { get; set; }
        public string Description { get; set; }
    }

    private List<Receiver> receivers = new List<Receiver>();
    private List<Transmitter> transmitters = new List<Transmitter>();
    BlazorApp3Context context = default!;
    IEnumerable<string> transmitterNames = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        context = await DbFactory.CreateDbContextAsync();
        receivers = await context.Receiver.ToListAsync();
        transmitters = await context.Transmitter.ToListAsync();
        transmitterNames = transmitters.Select(d => d.Name ?? string.Empty).ToList();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
