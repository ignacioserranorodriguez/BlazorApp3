@page "/receivers/delete"

@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Models
@inject IDbContextFactory<BlazorApp3.Data.BlazorApp3Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Matriz de vídeo - Administrador</PageTitle>

<h1>Administrador de dispositivos</h1><br />

<h4><a href="/administrador" style="text-decoration: none;">⬅️</a> Eliminar🗼Receptor</h4>

<hr />

<div>
    @if (receiver is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Nombre</dt>
            <dd class="col-sm-10">@receiver.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Estado</dt>
            <dd class="col-sm-10">
                @{
                    string statusText = receiver.Status switch
                    {
                        0 => "⬛ Apagado",
                        1 => "🟩 Encendido",
                        2 => "🟨 Espera",
                        _ => "Unknown"
                    };
                }
                @statusText
            </dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Transmisor asociado</dt>
            <dd class="col-sm-10">@receiver.Transmitter?.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IP</dt>
            <dd class="col-sm-10">@receiver.Ip</dd>
        </dl>
        <EditForm Model="@receiver" OnValidSubmit="DeleteReceiver" FormName="deleteReceiverForm">
            <button type="submit" class="btn btn-danger">Confirmar eliminación</button>
        </EditForm>
    }
</div>

@code {
    Receiver? receiver;

    [Parameter]
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        receiver = await context.Receiver
        .Include(r => r.Transmitter) // Include the Transmitter entity
        .FirstOrDefaultAsync(m => m.Id == Id);

        if (receiver is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteReceiver()
    {
        using var context = DbFactory.CreateDbContext();
        context.Receiver.Remove(receiver!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/administrador");
    }
}