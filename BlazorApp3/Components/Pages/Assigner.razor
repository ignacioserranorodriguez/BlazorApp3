@page "/asignador"

@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorApp3.Models
@using BlazorApp3.Data
@inject IDbContextFactory<BlazorApp3.Data.BlazorApp3Context> DbFactory

<PageTitle>Matriz de vídeo - Asignador</PageTitle>

<h1>Asignador entre Transmisores y Receptores</h1><br />

<RadzenLabel Text="Selecciona un transmisor" Component="DropDownChangeEvent" />
<RadzenDropDown @bind-Value=@transmitterSelectedValue Data=@transmitters TextProperty="@nameof(Transmitter.Name)"
    ValueProperty="Id" Style="width: 100%; max-width: 400px;" Name="DropDownChangeEvent"
    Change="@(transmitterSelectedId => update((int)transmitterSelectedId))" />

<br /><br />

<RadzenPickList @bind-Source="@Source" @bind-Target="@Target" Style="height:500px; width:100%;"
    Orientation="@orientation" TextProperty="@nameof(Receiver.Name)" AllowFiltering="@allowFilter" Multiple="@multiple"
    ShowHeader="@showHeader" Disabled="@disabled" ButtonGap="@gap" ButtonJustifyContent="@justifyContent"
    ButtonStyle="@style" ButtonSize="@size" ButtonShade="@shade" ButtonVariant="@variant">
    <SourceHeader>
        Receptores no asignados
    </SourceHeader>
    <TargetHeader>
        Receptores asignados
    </TargetHeader>
    <Template Context="context">
        <div key="@context.Id">
            @context.Name (@transmitters.First(t => t.Id == context.TransmitterId).Name)
        </div>
    </Template>
</RadzenPickList>

<br />

<RadzenButton Click=@(args => Save("Primary button")) Text="Guardar" ButtonStyle="ButtonStyle.Primary" />

@code {

    // RadzenPickList style
    JustifyContent justifyContent = JustifyContent.Center;
    Variant variant = Variant.Outlined;
    ButtonStyle style = ButtonStyle.Secondary;
    Shade shade = Shade.Default;
    ButtonSize size = ButtonSize.Medium;
    Orientation orientation = Orientation.Horizontal;
    string gap = "12px";
    bool allowFilter = true;
    bool multiple = false;
    bool showHeader = true;
    bool disabled;

    // Logic
    BlazorApp3Context context = default!;
    IEnumerable<Receiver> _source;
    IEnumerable<Receiver> Source
    {
        get
        {
            return _source;
        }
        set
        {
            if (_source != value)
            {
                _source = value;

                Console.WriteLine("Source updated");
            }
        }
    }
    IEnumerable<Receiver> _target;
    IEnumerable<Receiver> Target
    {
        get
        {
            return _target;
        }
        set
        {
            if (_target != value)
            {
                _target = value;

                Console.WriteLine("Target updated");
            }
        }
    }
    private List<Transmitter> transmitters = new List<Transmitter>();
    private List<Receiver> receivers = new List<Receiver>();
    int? transmitterSelectedValue;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        context = await DbFactory.CreateDbContextAsync();
        receivers = await context.Receiver.ToListAsync();
        transmitters = await context.Transmitter.ToListAsync();
    }

    private void update(int id)
    {
        Transmitter selectedTransmitter = transmitters.First(t => t.Id == id);
        Source = receivers.Where(r => r.TransmitterId != selectedTransmitter.Id);
        Target = receivers.Where(r => r.TransmitterId == selectedTransmitter.Id);
    }

    private async void Save(string buttonName)
    {
        if (Target != null)
        {
            foreach (Receiver receiver in Target)
            {
                Console.WriteLine("- " + receiver.Name);
                Console.WriteLine(receiver.TransmitterId);
                receiver.TransmitterId = transmitterSelectedValue;
                Console.WriteLine(receiver.TransmitterId);
            }
        }

        await context.SaveChangesAsync();
    }
}