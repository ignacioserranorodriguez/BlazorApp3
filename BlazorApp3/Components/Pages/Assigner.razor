@page "/asignador"

@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorApp3.Models
@using BlazorApp3.Data
@inject IDbContextFactory<BlazorApp3.Data.BlazorApp3Context> DbFactory

<PageTitle>Matriz de vídeo - Asignador</PageTitle>

<h1>Asignador entre Transmisores y Receptores</h1><br />

<RadzenLabel Text="Select Value" Component="DropDownChangeEvent" />
<RadzenDropDown @bind-Value=@transmitterSelectedValue Data=@transmitters TextProperty="@nameof(Transmitter.Name)"
    ValueProperty="Id" Style="width: 100%; max-width: 400px;" Name="DropDownChangeEvent"
    Change="@(args => update((int)args))" />

<br />

<RadzenCard>
    <RadzenPickList @bind-Source="@Source" @bind-Target="@Target" Style="height:500px; width:100%;"
        Orientation="@orientation" TextProperty="@nameof(Receiver.Name)" AllowFiltering="@allowFilter"
        Multiple="@multiple" ShowHeader="@showHeader" Disabled="@disabled" ButtonGap="@gap"
        ButtonJustifyContent="@justifyContent" ButtonStyle="@style" ButtonSize="@size" ButtonShade="@shade"
        ButtonVariant="@variant">
        <SourceHeader>
            Receptores no asignados
        </SourceHeader>
        <TargetHeader>
            Receptores asignados
        </TargetHeader>
        <Template>
            @context.Name
        </Template>
    </RadzenPickList>
</RadzenCard><br />

<RadzenButton Click=@(args => OnClick("Primary button")) Text="Guardar" ButtonStyle="ButtonStyle.Primary" />


@code {

    JustifyContent justifyContent = JustifyContent.Center;
    Variant variant = Variant.Outlined;
    ButtonStyle style = ButtonStyle.Secondary;
    Shade shade = Shade.Default;
    ButtonSize size = ButtonSize.Medium;
    Orientation orientation = Orientation.Horizontal;

    string gap = "12px";
    bool allowFilter = true;
    bool multiple = false;
    bool showHeader = true;
    bool disabled;

    IEnumerable<Receiver> _source;
    IEnumerable<Receiver> Source
    {
        get
        {
            return _source;
        }
        set
        {
            if (_source != value)
            {
                _source = value;

                Console.WriteLine("Source updated");
            }
        }
    }

    IEnumerable<Receiver> _target;
    IEnumerable<Receiver> Target
    {
        get
        {
            return _target;
        }
        set
        {
            if (_target != value)
            {
                _target = value;

                Console.WriteLine("Target updated");
            }
        }
    }

    BlazorApp3Context context = default!;
    private List<Transmitter> transmitters = new List<Transmitter>();
    private List<Receiver> receivers = new List<Receiver>();
    int? transmitterSelectedValue;
    Transmitter selectedTransmitter;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        context = await DbFactory.CreateDbContextAsync();
        receivers = await context.Receiver.ToListAsync();
        transmitters = await context.Transmitter.ToListAsync();


        Source = receivers;
    }

    private void update(int id)
    {
        selectedTransmitter = transmitters.First(t => t.Id == id);
        IEnumerable<Receiver> receiversAssigned = receivers.Where(r => r.TransmitterId == selectedTransmitter.Id);
        Target = receiversAssigned;

        IEnumerable<Receiver> receiversNotAsigned = new List<Receiver>();
        foreach (var receiver in receivers)
        {
            bool containsItem = receiversAssigned.Any(item => item.Id == receiver.Id);

            if (!containsItem)
            {
                receiversNotAsigned.Append(receiver);
            }
        }



        Source = receiversNotAsigned;
    }

    private void OnClick(string buttonName)

    {

        // Handle the button click event here

    }


}
